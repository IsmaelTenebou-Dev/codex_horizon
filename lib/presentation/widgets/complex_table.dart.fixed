import 'package:flutter/material.dart';
import '../../core/theme.dart';
import '../../data/models/table_item_model.dart';
import '../../domain/entities/table_item_entity.dart';
import 'package:percent_indicator/linear_percent_indicator.dart';

class ComplexTable extends StatelessWidget {
  final String title;
  final List<TableItemModel> items;
  final Widget? trailing;
  final double? height;

  const ComplexTable({
    super.key,
    required this.title,
    required this.items,
    this.trailing,
    this.height,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      height: height,
      decoration: BoxDecoration(
        color: const Color(0xFF1B254B),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Title and trailing widget
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  title,
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
                if (trailing != null) trailing!,
              ],
            ),
          ),
          
          // Table header
          Container(
            decoration: BoxDecoration(
              color: Colors.black.withOpacity(0.2),
              border: const Border(
                top: BorderSide(color: Colors.white24),
                bottom: BorderSide(color: Colors.white24),
              ),
            ),
            padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 16),
            child: Row(
              children: [
                // Name column
                Expanded(
                  flex: 3,
                  child: Text(
                    'NAME',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: Colors.white.withOpacity(0.7),
                      fontSize: 11,
                    ),
                  ),
                ),
                // Status column
                Expanded(
                  flex: 2,
                  child: Text(
                    'STATUS',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: Colors.white.withOpacity(0.7),
                      fontSize: 11,
                    ),
                  ),
                ),
                // Date column
                Expanded(
                  flex: 2,
                  child: Text(
                    'DATE',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: Colors.white.withOpacity(0.7),
                      fontSize: 11,
                    ),
                  ),
                ),
                // Progress column
                Expanded(
                  flex: 3,
                  child: Text(
                    'PROGRESS',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: Colors.white.withOpacity(0.7),
                      fontSize: 11,
                    ),
                  ),
                ),
              ],
            ),
          ),
          
          // Scrollable table content
          Expanded(
            child: SingleChildScrollView(
              physics: const BouncingScrollPhysics(),
              child: Column(
                children: List.generate(items.length, (index) {
                  final item = items[index];
                  return Container(
                    height: 48,
                    decoration: BoxDecoration(
                      color: index.isEven ? Colors.black.withOpacity(0.1) : Colors.transparent,
                      border: Border(
                        bottom: BorderSide(
                          color: Colors.white24,
                          width: index == items.length - 1 ? 0 : 1,
                        ),
                      ),
                    ),
                    child: Row(
                      children: [
                        // Name
                        Expanded(
                          flex: 3,
                          child: Padding(
                            padding: const EdgeInsets.only(left: 16),
                            child: Text(
                              item.name,
                              style: const TextStyle(
                                fontSize: 12,
                                color: Colors.white,
                              ),
                              overflow: TextOverflow.ellipsis,
                            ),
                          ),
                        ),
                        
                        // Status
                        Expanded(
                          flex: 2,
                          child: _buildStatusChip(item.status),
                        ),
                        
                        // Date
                        Expanded(
                          flex: 2,
                          child: Text(
                            item.date ?? '',
                            style: const TextStyle(
                              fontSize: 12,
                              color: Colors.white,
                            ),
                          ),
                        ),
                        
                        // Progress bar
                        Expanded(
                          flex: 3,
                          child: Padding(
                            padding: const EdgeInsets.only(right: 16),
                            child: LinearPercentIndicator(
                              lineHeight: 6.0,
                              percent: (item.progress ?? 0) / 100,
                              backgroundColor: AppTheme.borderLight,
                              progressColor: _getProgressColor(item.status),
                              barRadius: const Radius.circular(3),
                              padding: EdgeInsets.zero,
                            ),
                          ),
                        ),
                      ],
                    ),
                  );
                }),
              ),
            ),
          ),
        ],
      ),
    );
  }
  
  Widget _buildStatusChip(TableItemStatus? status) {
    if (status == null) return const SizedBox.shrink();
    
    Color backgroundColor;
    String label;
    
    switch (status) {
      case TableItemStatus.approved:
        backgroundColor = AppTheme.green;
        label = 'Approved';
        break;
      case TableItemStatus.disabled:
        backgroundColor = AppTheme.grayText;
        label = 'Disable';
        break;
      case TableItemStatus.error:
        backgroundColor = AppTheme.red;
        label = 'Error';
        break;
      case TableItemStatus.pending:
        backgroundColor = AppTheme.yellow;
        label = 'Pending';
        break;
    }
    
    return Chip(
      label: Text(
        label,
        style: const TextStyle(
          color: Colors.white,
          fontSize: 12,
        ),
      ),
      backgroundColor: backgroundColor,
      materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,
      visualDensity: VisualDensity.compact,
      padding: EdgeInsets.zero,
      labelPadding: const EdgeInsets.symmetric(horizontal: 8, vertical: -4),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(8),
      ),
    );
  }
  
  Color _getProgressColor(TableItemStatus? status) {
    switch (status) {
      case TableItemStatus.approved:
        return AppTheme.green;
      case TableItemStatus.disabled:
        return AppTheme.grayText;
      case TableItemStatus.error:
        return AppTheme.red;
      case TableItemStatus.pending:
        return AppTheme.yellow;
      default:
        return AppTheme.primaryBlue;
    }
  }
}
